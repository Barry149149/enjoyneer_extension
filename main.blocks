<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id="?g75!a)975XX15oqL6A`" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id="M|U}-F;k:/{6)}(xCUVo" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace enjoyneer {" line1="" line2="    const PCA9685_ADDRESS = 0x40" line3="    const MODE1 = 0x00" line4="    const MODE2 = 0x01" line5="    const SUBADR1 = 0x02" line6="    const SUBADR2 = 0x03" line7="    const SUBADR3 = 0x04" line8="    const PRESCALE = 0xFE" line9="    const LED0_ON_L = 0x06" line10="    const LED0_ON_H = 0x07" line11="    const LED0_OFF_L = 0x08" line12="    const LED0_OFF_H = 0x09" line13="    const ALL_LED_ON_L = 0xFA" line14="    const ALL_LED_ON_H = 0xFB" line15="    const ALL_LED_OFF_L = 0xFC" line16="    const ALL_LED_OFF_H = 0xFD" line17="" line18="    " line19="    let initialized = false" line20="" line21="    const PortDigi = [" line22="        [DigitalPin.P0, DigitalPin.P8]," line23="        [DigitalPin.P1, DigitalPin.P12]," line24="    ]" line25="" line26="    export enum Ports {" line27="        PORT1 = 0," line28="        PORT2 = 1," line29="    }" line30="" line31="    export enum Slots {" line32="        A = 1, // inverse slot by zp" line33="        B = 0" line34="    }" line35="" line36="    export enum Motors {" line37="        Motor1 = 13," line38="        Motor2 = 15" line39="    }" line40="" line41="    const MotorDirectionPins=[DigitalPin.P13, DigitalPin.P15]" line42="        " line43="    const MotorPWMPins=[AnalogPin.P14, AnalogPin.P16]" line44="   " line45="   " line46="" line47="    export enum DHT11Type {" line48="        //% block=temperature(°C)" line49="        TemperatureC = 0," line50="        //% block=temperature(°F)" line51="        TemperatureF = 1," line52="        //% block=humidity" line53="        Humidity = 2" line54="    }" line55="" line56="" line57="" line58="" line59="    //% blockID=hhaha block=&quot;Raindrop|port %hee&quot;" line60="    //% weight=40" line61="    //% group=&quot;Environment&quot; blockGap=50" line62="    export function RainDrop(hee: Ports): boolean{" line63="        return true" line64="    }" line65="" line66="    //% blockId=dht11 block=&quot;DHT11|port %port|type %readtype&quot;" line67="    //% weight=60" line68="    //% group=&quot;Environment&quot; blockGap=50" line69="    export function DHT11(port: Ports, readtype: DHT11Type): number {" line70="        let dht11pin = PortDigi[port][0]" line71="" line72="        return 1" line73="" line74="    }" line75="" line76="    export function MotorRun(index: Motors, speed: number): void {" line77="        let motor_pwm_pin=MotorPWMPins[index]" line78="        let motor_direction_pin=MotorDirectionPins[index]" line79="" line80="        if(speed&lt;0){" line81="            pins.digitalWritePin(motor_direction_pin, 0)" line82="        }else{" line83="            pins.digitalWritePin(motor_direction_pin, 1)" line84="        }" line85="        pins.analogWritePin(motor_pwm_pin,speed/255*1024)" line86="    " line87="    }" line88="" line89="    //% blockId=custom_motor_dual block=&quot;Motor|speed of Motor1 %speed1|speed of Motor2 %speed2&quot;" line90="    //% weight=43" line91="    //% speed1.min=-255 speed1.max=255" line92="    //% speed2.min=-255 speed2.max=255" line93="    //% group=&quot;Actuator&quot; name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line94="    export function MotorRunDual(speed1: number, speed2: number): void {" line95="        MotorRun(0, speed1);" line96="        MotorRun(1, speed2);" line97="    }" line98="" line99="    //% blockId=custom_tracer block=&quot;Tracer|port %port|slot %slot&quot;" line100="    //% group=&quot;Linefollower&quot; weight=81" line101="    export function Tracer(port: Ports, slot: Slots): boolean {" line102="        let pin = PortDigi[port][slot]" line103="        pins.setPull(pin, PinPullMode.PullUp)" line104="        return pins.digitalReadPin(pin) == 1" line105="    }" line106="" line107="    //% blockId=custom_tracing_line_with_motors block=&quot;MoveAlongBlackLine|port %port|speed %speed&quot;" line108="    //% speed.min=-255 speed.max=255" line109="    export function TracingLineWithMotors(port: Ports, speed: number): void {" line110="        if (Tracer(port, Slots.A) &amp;&amp; Tracer(port, Slots.B)) {" line111="            MotorRunDual(speed, speed)" line112="        } else if (!(Tracer(port, Slots.A)) &amp;&amp; Tracer(port, Slots.B)) {" line113="            MotorRunDual(speed, -speed)" line114="        } else if (Tracer(port, Slots.A) &amp;&amp; !(Tracer(port, Slots.B))) {" line115="            MotorRunDual(-speed, speed)" line116="        } else if (!(Tracer(port, Slots.A)) &amp;&amp; !(Tracer(port, Slots.B))) {" line117="            MotorRunDual(-speed, -speed)" line118="        }" line119="    }" line120="}" numlines="121"></mutation></block></statement></block></xml>